// Code generated by Validator v0.2.5. DO NOT EDIT.

package test

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *Example) IsValid() error {
	if len([]rune(p.MaxRuneString)) > int(10) {
		return fmt.Errorf("field MaxRuneString max_rune_size rule failed, current value: %d", len([]rune(p.MaxRuneString)))
	}
	if len([]rune(p.MinRuneString)) < int(10) {
		return fmt.Errorf("field MinRuneString min_rune_size rule failed, current value: %d", len([]rune(p.MinRuneString)))
	}
	for k := range p.KeyValues {
		if len([]rune(k)) > int(10) {
			return fmt.Errorf("field k max_rune_size rule failed, current value: %d", len([]rune(k)))
		}
		if len([]rune(k)) < int(10) {
			return fmt.Errorf("field k min_rune_size rule failed, current value: %d", len([]rune(k)))
		}
	}
	return nil
}
